services:
  redis:
    image: 'redis'
    container_name: redis
    restart: always
    ports:
      - '${REDIS_PORT}:${REDIS_PORT}'
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 10s
      retries: 5
    tty: true
  
  api:
    build:
      context: ..
      dockerfile: deploy/images/api/Dockerfile
    container_name: api
    restart: always
    ports:
      - '8080:8080'
    environment:
      AUTH_SERVICE_HOST: auth-grp—Å
      USER_SERVICE_HOST: user-grpc
    depends_on:
      - auth-grpc
      - user-grpc
      - postgres
    tty: true

  auth-grpc:
    build: 
      context: ..
      dockerfile: deploy/images/auth/Dockerfile
    environment:
      REDIS_PORT: ${REDIS_PORT}
      REDIS_HOST: redis
    container_name: auth-grpc
    restart: always
    depends_on:
      - redis
    ports:
      - '5001:5001'
    tty: true

  postgres:
    image: 'postgres:16'
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_HOST: ${POSTGRES_HOST}
    ports:
      - '${POSTGRES_PORT}:${POSTGRES_PORT}'
    volumes:
      - 'pgdata:/var/lib/postgresql/data'
      - './_postgres:/docker-entrypoint-initdb.d'
      - './images/postgres/postgresql.conf:/etc/postgresql/postgresql.conf'
    command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    tty: true

  user-grpc:
    build: 
      context: ..
      dockerfile: deploy/images/user/Dockerfile
    environment:
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_HOST: postgres
    container_name: user-grpc
    restart: always
    depends_on:
      - postgres
    ports:
      - '5002:5002'
    tty: true

volumes:
  pgdata:
    driver: local